@page "/step04"
@using Fluxor
@using BlazorKnowledge.Flux.Store.Weather
@using BlazorKnowledge.Proxies.BlazorKnowledge.Server
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject IState<WeatherState> WeatherState
@inject IDispatcher Dispatcher

<div style="padding-left: 20px; font-size: x-large">
    <h1>Using asynchronous Effects to fetch a collection</h1>

    In the Flux project Store/Weather a complete setup is given with state, actions, reducers and effects.

    To use these in this page we need to inject the state:
    <pre>@@inject IState&lt;WeatherState&gt; WeatherState</pre>
    <br/>
    Dispatch the fetch Action by clicking this button: <button @onclick="OnClicked">Fetch data slowly</button>
    With a delay in effect to see update.
    <br/>
    <br/>
    @if (IsLoading)
    {
        <p>
            <em>Loading...</em>
        </p>
    }
    else if (Report.Any())
    {
        <table id="weather">
            <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Summary</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var forecast in Report)
            {
                <tr>
                    <td>@forecast.Date.ToString("dd-MM-yyyy")</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
            </tbody>
        </table>
    }
</div>

@code {

    private bool IsLoading => WeatherState.Value.IsLoading;
    private ICollection<WeatherForecast> Report => WeatherState.Value.Report;

    private void OnClicked() => Dispatcher.Dispatch(new WeatherFetchAction());

}
